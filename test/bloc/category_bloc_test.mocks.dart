// Mocks generated by Mockito 5.3.2 from annotations
// in easyorder/test/bloc/category_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i7;

import 'package:easyorder/models/category_model.dart' as _i4;
import 'package:easyorder/models/image_type.dart' as _i8;
import 'package:easyorder/models/storage_model.dart' as _i6;
import 'package:easyorder/repository/category_repository.dart' as _i2;
import 'package:easyorder/service/storage_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i2.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.CategoryModel>> findActive({required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #findActive,
          [],
          {#userId: userId},
        ),
        returnValue: _i3.Stream<List<_i4.CategoryModel>>.empty(),
      ) as _i3.Stream<List<_i4.CategoryModel>>);
  @override
  _i3.Future<List<_i4.CategoryModel>> find({
    required String? userId,
    int? pageSize,
    _i4.CategoryModel? lastCategory,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #find,
          [],
          {
            #userId: userId,
            #pageSize: pageSize,
            #lastCategory: lastCategory,
          },
        ),
        returnValue:
            _i3.Future<List<_i4.CategoryModel>>.value(<_i4.CategoryModel>[]),
      ) as _i3.Future<List<_i4.CategoryModel>>);
  @override
  _i3.Stream<int?> count({required String? userId}) => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
          {#userId: userId},
        ),
        returnValue: _i3.Stream<int?>.empty(),
      ) as _i3.Stream<int?>);
  @override
  _i3.Future<List<_i4.CategoryModel>> findByName({
    required String? userId,
    String? name,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findByName,
          [],
          {
            #userId: userId,
            #name: name,
          },
        ),
        returnValue:
            _i3.Future<List<_i4.CategoryModel>>.value(<_i4.CategoryModel>[]),
      ) as _i3.Future<List<_i4.CategoryModel>>);
  @override
  _i3.Future<String?> create({
    required String? userId,
    required _i4.CategoryModel? category,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #userId: userId,
            #category: category,
          },
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
  @override
  _i3.Future<bool> update({
    required String? userId,
    required String? categoryId,
    required _i4.CategoryModel? category,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #userId: userId,
            #categoryId: categoryId,
            #category: category,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.CategoryModel?> toggleActive({
    required String? userId,
    required String? categoryId,
    required bool? active,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleActive,
          [],
          {
            #userId: userId,
            #categoryId: categoryId,
            #active: active,
          },
        ),
        returnValue: _i3.Future<_i4.CategoryModel?>.value(),
      ) as _i3.Future<_i4.CategoryModel?>);
  @override
  _i3.Future<bool> delete({
    required String? userId,
    required String? categoryId,
    required String? categoryUuid,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #userId: userId,
            #categoryId: categoryId,
            #categoryUuid: categoryUuid,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i5.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i6.StorageModel?> upload({
    required String? userId,
    required _i7.File? file,
    required _i8.ImageType? imageType,
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #upload,
          [],
          {
            #userId: userId,
            #file: file,
            #imageType: imageType,
            #path: path,
          },
        ),
        returnValue: _i3.Future<_i6.StorageModel?>.value(),
      ) as _i3.Future<_i6.StorageModel?>);
  @override
  _i3.Future<void> delete({required String? path}) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#path: path},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
